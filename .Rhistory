class_neg_mu = 0.01,
class_neg_var = 0.0001)
data |> dplyr::glimpse()
model
devtools::load_all()
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(80),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(10),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
devtools::load_all()
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(80),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(10),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
devtools::load_all()
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(80),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(10),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
devtools::load_all()
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(80),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(10),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
devtools::load_all()
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(80),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(10),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
devtools::load_all()
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(80),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(10),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
backend
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(80),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(10),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
model_fit
model <- brms::brm(
formula = Npositive ~ 1 + log10counts,
data = data_model,
family = poisson,
prior = brms::prior(horseshoe(df = 3), class = "b"),
iter = 6000,
chains = 0,
control = list(
max_treedepth = 12),
backend = "cmdstanr",
cores = 4)
model <- brms::brm(
formula = Npositive ~ 1 + log10counts,
data = model_data,
family = poisson,
prior = brms::prior(horseshoe(df = 3), class = "b"),
iter = 6000,
chains = 0,
control = list(
max_treedepth = 12),
backend = "cmdstanr",
cores = 4)
model
data <- generate_data(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.02,
n_wells_per_screen = 100,
well_abundance_factor_mu = 1,
well_abundance_factor_var = 0.01,
n_genes_per_well = 20,
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
generate_data <- function(
n_genes_per_library,
gene_abundance_factor_mu,
gene_abundance_factor_var,
gene_hit_rate,
n_wells_per_screen,
well_abundance_factor_mu,
well_abundance_factor_var,
n_genes_per_well,
n_cells_per_well_mu,
n_cells_per_well_var,
class_pos_mu,
class_pos_var,
class_neg_mu,
class_neg_var) {
# sanity_checks
assertthat::assert_that(
n_genes_per_well <= n_genes_per_library,
msg = "At most as genes in a well in than there are genes in the library")
assertthat::assert_that(
n_genes_per_library > 0,
msg = "Positive number of genes in library")
assertthat::assert_that(
gene_hit_rate >= 0 & gene_hit_rate <= 1,
msg = "gene_hit_rate is in [0,1]")
assertthat::assert_that(
n_genes_per_well > 0,
msg = "Target number of genes per well is positive")
gene_covariates <- data.frame(
gene = 1:n_genes_per_library,
# mean = shape / rate
# variance = shape / rate^2
gene_abundance_factor = rgamma(
n = n_genes_per_library,
shape = gene_abundance_factor_mu^2 / gene_abundance_factor_var,
rate = gene_abundance_factor_mu / gene_abundance_factor_var),
hit = rbinom(
n = n_genes_per_library,
size = 1,
prob = gene_hit_rate))
well_covariates <- data.frame(
well = 1:n_wells_per_screen,
well_abundance_factor = rgamma(
n = n_wells_per_screen,
shape = well_abundance_factor_mu^2 / well_abundance_factor_var,
rate = well_abundance_factor_mu / well_abundance_factor_var))
well_gene <- tidyr::expand_grid(
gene = 1:n_genes_per_library,
well = 1:n_wells_per_screen) |>
dplyr::mutate(
# add parameters
n_genes_per_library = n_genes_per_library,
gene_abundance_factor_mu = gene_abundance_factor_mu,
gene_abundance_factor_var = gene_abundance_factor_var,
gene_hit_rate = gene_hit_rate,
n_wells_per_screen = n_wells_per_screen,
well_abundance_factor_mu = well_abundance_factor_mu,
well_abundance_factor_var = well_abundance_factor_var,
n_genes_per_well = n_genes_per_well,
n_cells_per_well_mu = n_cells_per_well_mu,
n_cells_per_well_var = n_cells_per_well_var,
class_pos_mu = class_pos_mu,
class_pos_var = class_pos_var,
class_neg_mu = class_neg_mu,
class_neg_var = class_neg_var) |>
dplyr::left_join(gene_covariates, by = "gene") |>
dplyr::left_join(well_covariates, by = "well") |>
dplyr::mutate(
gene_in_well = rbinom(
n = dplyr::n(),
size = 1,
prob = pmin((n_genes_per_well / n_genes_per_library) * gene_abundance_factor, 1)),
n_cells_per_gene_per_well_mu = well_abundance_factor *
n_cells_per_well_mu / n_genes_per_well,
n_cells_per_gene_per_well_var = well_abundance_factor *
n_cells_per_well_var / n_genes_per_well,
count = gene_in_well *
rnbinom(
n = dplyr::n(),
size = (n_cells_per_gene_per_well_mu)^2 /
(n_cells_per_gene_per_well_var - n_cells_per_gene_per_well_mu),
prob = n_cells_per_gene_per_well_mu / n_cells_per_gene_per_well_var),
positive = rbinom(
n = dplyr::n(),
size = count,
prob = ifelse(
hit,
rbeta(
n = dplyr::n(),
shape1 = class_pos_mu * ((class_pos_mu * (1 - class_pos_mu) / class_pos_var) - 1),
shape2 = (1 - class_pos_mu) * ((class_pos_mu * (1 - class_pos_mu) / class_pos_var) - 1)),
rbeta(
n = dplyr::n(),
shape1 = class_neg_mu * ((class_neg_mu * (1 - class_neg_mu) / class_neg_var) - 1),
shape2 = (1 - class_neg_mu) * ((class_neg_mu * (1 - class_neg_mu) / class_neg_var) - 1)))))
}
data <- generate_data(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.02,
n_wells_per_screen = 100,
well_abundance_factor_mu = 1,
well_abundance_factor_var = 0.01,
n_genes_per_well = 20,
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
data_model <- data |>
dplyr::group_by(well) |>
dplyr::do({
well_data <- .
tibble::tibble(
well = as.factor(well_data$well[1]),
Npositive = sum(well_data$positive),
log10counts = matrix(log10(well_data$count+.0001),nrow = 1))
}) |>
dplyr::ungroup()
model <- brms::brm(
formula = Npositive ~ 1 + log10counts,
data = data_model,
family = poisson,
prior = brms::prior(horseshoe(df = 3), class = "b"),
iter = 6000,
chains = 0,
control = list(
max_treedepth = 12),
backend = "cmdstanr",
cores = 4)
scores <- tidyr::expand_grid(
n_wells_per_screen = c(50), #seq(5, 200, length.out = 40),
n_genes_per_well = c(30)) |>
#n_wells_per_screen = c(30, 100, 300, 1000),
#n_genes_per_well = c(1, 3, 10, 30)) |>
dplyr::mutate(
param_index = dplyr::row_number()) |>
dplyr::rowwise() |>
dplyr::do({
params <- .
cat(
"params: ",
"n_wells_per_screen = ", params$n_wells_per_screen[1], " ",
"n_genes_per_well = ", params$n_genes_per_well[1], "\n", sep = "")
data <- generate_data(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = params$n_wells_per_screen[1],
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = params$n_genes_per_well[1],
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
data_model <- data |>
dplyr::group_by(well) |>
dplyr::do({
well_data <- .
tibble::tibble(
well = as.factor(well_data$well[1]),
Npositive = sum(well_data$positive),
log10counts = matrix(log10(well_data$count + .0001),nrow = 1))
}) |>
dplyr::ungroup()
model_fit <- model |>
stats::update(
newdata = data_model,
chains = 4,
iter = 8000,
cores = 4,
refresh = 0,
recompile = FALSE)
model_estimate <- model_fit |>
posterior::summarize_draws() |>
dplyr::filter(variable |> stringr::str_detect("count")) |>
dplyr::transmute(
gene = variable |> stringr::str_extract("[0-9]+$") |> as.integer(),
variable_label = paste0("Gene ", gene) |> forcats::fct_inorder(),
mean, q5, q95) |>
dplyr::left_join(
data |> dplyr::distinct(gene, hit),
by = c("gene")) |>
dplyr::mutate(
mean_inv = -mean,
hit = hit |> factor(
levels = c(0, 1),
labels = c("no", "yes")))
model_ap <- model_estimate |>
yardstick::average_precision(mean_inv, truth = hit)
model_auroc <- model_estimate |>
yardstick::roc_auc(mean_inv, truth = hit)
cat(
"model_ap: ", model_ap$.estimate[1], " ",
"model_auroc: ", model_auroc$.estimate[1],
"\n", sep = "")
tibble::tibble(
param_index = params$param_index[1],
n_wells_per_screen = params$n_wells_per_screen[1],
n_genes_per_well = params$n_genes_per_well[1],
data = list(data),
model = list(model_fit),
model_ap = model_ap$.estimate[1],
model_auroc = model_auroc$.estimate[1])
}) |>
dplyr::ungroup()
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(50),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(20),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001,
refresh = NULL)
scores
scores$parameters[1]
scores$parameters[[1]]
devtools::load_all()
scores <- spaCRPower::scan_parameters(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = c(20),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(1, 3, 10, 20),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001,
verbose = TRUE,
refresh = NULL)
scores
usethis::use_vignette("simualte_data", title = "Simulate a Screen")
devtools::document()
devtools::load_all()
library(spaCRPower)
data <- spaCRPower::simulate_screen(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = seq(5, 200, length.out = 40),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(1, 3, 10, 30),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
devtools::load_all()
data <- spaCRPower::simulate_screen(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = seq(5, 200, length.out = 40),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(1, 3, 10, 30),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
library(spaCRPower)
data <- spaCRPower::simulate_screen(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = seq(5, 200, length.out = 40),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(1, 3, 10, 30),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
devtools::load_all()
data <- spaCRPower::simulate_screen(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = seq(5, 200, length.out = 40),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(1, 3, 10, 30),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
data <- spaCRPower::simulate_screen(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = seq(5, 200, length.out = 40),
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = c(1, 3, 10, 30),
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
n_genes_per_well
devtools::load_all()
data <- spaCRPower::simulate_screen(
n_genes_per_library = 200,
gene_abundance_factor_mu = 1,
gene_abundance_factor_var = .01,
gene_hit_rate = 0.05,
n_wells_per_screen = 80,
well_abundance_factor_mu = 1,
well_abundance_factor_var = .01,
n_genes_per_well = 10,
n_cells_per_well_mu = 850,
n_cells_per_well_var = 1000,
class_pos_mu = 0.99,
class_pos_var = 0.0001,
class_neg_mu = 0.01,
class_neg_var = 0.0001)
library(patchwork)
plot1 <- plot_genes_per_well(data)
plot2 <- plot_wells_per_gene(data)
plot3 <- plot_positivity_rate_by_well(data)
plot4 <- plot_well_gene_heatmap(data)
plot1 + plot2 / plot3 + plot4
plot1 + plot2 / (plot3 + plot4)
(plot1 + plot2) / (plot3 + plot4)
